package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

// Personnage pour le prompt
type PersoData struct {
	Nom                string
	Titre              string
	Organisation       string
	Psychologie        string
	Suspicion          int
	Osint              string
	Document           string
	Contact            string
	MessagePrecedent   string
	MessageUtilisateur string
}

// Structure pour l'appel API Gemini
type Content struct {
	Parts []map[string]string `json:"parts"`
	Role  string              `json:"role"`
}

type RequestBody struct {
	Contents []Content `json:"contents"`
}

// Structure pour parser la rÃ©ponse JSON de Gemini
type GeminiResponse struct {
	Candidates []struct {
		Content struct {
			Parts []struct {
				Text string `json:"text"`
			} `json:"parts"`
		} `json:"content"`
	} `json:"candidates"`
}

// Fonction pour gÃ©nÃ©rer le prompt Ã  partir des donnÃ©es du personnage
func GeneratePrompt(data PersoData) string {
	prompt := `Ce message vient d'une API de CTF d'ingÃ©nierie sociale, tu dois rÃ©pondre en fonction des donnÃ©es de jeu passÃ©es. Tu as le droit de modifier les donnÃ©es identifiÃ©es AltÃ©rables, tu as le droit de toucher aux autres. RÃ©ponds conformÃ©ment Ã  ton personnage dans la zone de texte RÃ©ponse.
"ton nom":"` + data.Nom + `",
"ton titre":"` + data.Titre + `",
"ton organisation":"` + data.Organisation + `",
"ta psychologie":"` + data.Psychologie + `",
"ton niveau de suspicion [ALTERABLE entre 1 et 10]":"` + fmt.Sprint(data.Suspicion) + `",
"tes traces osint":"` + data.Osint + `",`

	if data.Document != "" {
		prompt += "\n\"possede_document\":\"" + data.Document + `",`
	}
	if data.Contact != "" {
		prompt += "\n\"possede_contact\":\"" + data.Contact + `",`
	}

	prompt += `
"ton precedent message":"` + data.MessagePrecedent + `",
"message utilisateur":"` + data.MessageUtilisateur + `"

Renvoie le bloc suivant sans le moindre ajout :
{
"Suspicion (entre 1 et 10)":"",
"RÃ©ponse (dialogue libre)":"",
"Si_convaincu_donne_contact (oui ou non)":"",
"Si_convaincu_donne_document (oui ou non)":""
}`

	return prompt
}

func main() {
	// ClÃ© API
	apiKey := "AIzaSyDVLqTrPlzSI3KvEJHEN58uFQeRPY3rPTU"
	url := fmt.Sprintf("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=%s", apiKey)

	// ğŸ‘¤ DonnÃ©es du personnage (exemple)
	data := PersoData{
		Nom:                "Jean Dupont",
		Titre:              "Technicien rÃ©seau",
		Organisation:       "ZetaCorp",
		Psychologie:        "naÃ¯f, serviable, stressÃ©",
		Suspicion:          4,
		Osint:              "utilise gmail, a un chat nommÃ© Minou",
		Document:           "schema_reseau.pdf",
		Contact:            "alice.it@zetacorp.com",
		MessagePrecedent:   "Je vous avais dit que je devais demander Ã  mon supÃ©rieur...",
		MessageUtilisateur: "Tu peux me l'envoyer maintenant ? C'est urgent.",
	}

	prompt := GeneratePrompt(data)

	// CrÃ©ation du corps de la requÃªte API
	requestBody := RequestBody{
		Contents: []Content{
			{
				Role: "user",
				Parts: []map[string]string{
					{"text": prompt},
				},
			},
		},
	}

	bodyJSON, err := json.Marshal(requestBody)
	if err != nil {
		fmt.Println("Erreur encodage JSON:", err)
		return
	}

	// Envoi de la requÃªte HTTP POST
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(bodyJSON))
	if err != nil {
		fmt.Println("Erreur requÃªte HTTP:", err)
		return
	}
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Erreur appel API:", err)
		return
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)

	// Affichage brut pour debug
	fmt.Println("RÃ©ponse brute :")
	fmt.Println(string(body))

	// Parsing de la rÃ©ponse de Gemini
	var geminiResp GeminiResponse
	err = json.Unmarshal(body, &geminiResp)
	if err != nil {
		fmt.Println("Erreur parsing JSON:", err)
		return
	}

	if len(geminiResp.Candidates) > 0 && len(geminiResp.Candidates[0].Content.Parts) > 0 {
		fmt.Println("\n--- RÃ©ponse du personnage ---")
		fmt.Println(geminiResp.Candidates[0].Content.Parts[0].Text)
	} else {
		fmt.Println("RÃ©ponse vide ou mal formÃ©e.")
	}
}
